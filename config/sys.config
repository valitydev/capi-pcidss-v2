[
    {kernel, [
        {logger_level, info},
        {logger, [
            {handler, default, logger_std_h, #{
                level => debug,
                config => #{
                    type => {file, "/var/log/capi_pcidss/console.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }},
            {handler, access_logger, logger_std_h, #{
                level => info,
                config => #{
                    type => {file, "/var/log/capi_pcidss/access_log.json"},
                    sync_mode_qlen => 20,
                    burst_limit_enable => true,
                    burst_limit_max_count => 600,
                    burst_limit_window_time => 1000
                },
                filters => [{access_log, {fun logger_filters:domain/2, {stop, not_equal, [cowboy_access_log]}}}],
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {capi_pcidss, [
        {ip, "::"},
        {port, 8080},
        %% To send ASCII text in 5xx replies
        %% {oops_bodies, #{
        %%     500 => "oops_bodies/500_body"
        %% }},
        {scoper_event_handler_options, #{
            event_handler_opts => #{
                formatter_opts => #{
                    max_length => 1000,
                    max_printable_string_length => 80
                }
            }
        }},
        % seconds
        {reporter_url_lifetime, 60},
        {service_type, real},
        {bouncer_ruleset_id, <<"service/authz/api">>},
        {swagger_handler_opts, #{
            validation_opts => #{
                schema => #{
                    response => mild
                }
            }
        }},
        {lechiffre_opts, #{
            encryption_key_path => {json, {file, <<"path/to/key1.secret">>}},
            decryption_key_path => [{json, {file, <<"path/to/key1.secret">>}}]
        }},
        {validation, #{
            %% By default now = current datetime.
            now => {{2020, 3, 1}, {0, 0, 0}}
        }},
        {health_check, #{
            disk => {erl_health, disk, ["/", 99]},
            memory => {erl_health, cg_memory, [99]},
            service => {erl_health, service, [<<"capi_pcidss">>]}
        }},
        {payment_tool_token_lifetime, <<"64m">>},
        % milliseconds
        {max_request_deadline, 60000},
        {auth_config, #{
            metadata_mappings => #{
                party_id => <<"test.valitydev.party.id">>,
                token_consumer => <<"test.valitydev.capi.consumer">>,
                user_id => <<"test.valitydev.user.id">>,
                user_email => <<"test.valitydev.user.email">>
            }
        }},
        {bank_card_token_service_mapping, #{
            googlepay => <<"GOOGLE PAY">>,
            applepay => <<"APPLE PAY">>,
            samsungpay => <<"SAMSUNG PAY">>,
            yandexpay => <<"YANDEX PAY">>
        }},
        % map moneypenny Operator enum to
        % damsel MobileOperatorRef.id
        {mobile_commerce_mapping, #{
            mts => <<"MTS">>,
            beeline => <<"BEELINE">>,
            megafone => <<"MEGAFON">>,
            tele2 => <<"TELE2">>,
            yota => <<"YOTA">>
        }},
        % Under which namespace to put user-defined metadata?
        % E.g. `PaymentTerminalData.metadata`.
        {payment_resource_metadata_namespace, <<"dev.vality.paymentResource">>}
    ]},

    {capi_woody_client, [
        {services, #{
            cds_storage => "http://cds:8022/v2/storage",
            tds_storage => "http://cds:8022/v1/token_storage",
            payment_tool_provider_apple_pay => "http://adapter-appepay:8022/provider/apple",
            payment_tool_provider_google_pay => "http://adapter-goolepay:8022/provider/google",
            payment_tool_provider_yandex_pay => "http://adapter-yandexpay:8022/provider/yandex",
            binbase => "http://binbase:8022/v1/binbase",
            moneypenny => "http://moneypenny:8022/operator"
        }},
        {service_deadlines, #{
            % milliseconds
            party_management => 5000,
            customer_management => 10000
        }},
        {service_retries, #{
            party_management => #{
                % function => retry strategy
                % '_' work as "any"
                % default value is 'finish'
                % for more info look genlib_retry :: strategy()
                % https://github.com/valitydev/genlib/blob/master/src/genlib_retry.erl#L19
                'Get' => {linear, 3, 1000},
                '_' => finish
            }
        }}
    ]},

    {bouncer_client, [
        {service_clients, #{
            bouncer => #{
                url => <<"http://bouncer:8022/">>,
                timeout => 500,
                retries => #{
                    'Judge' => {linear, 1, 100},
                    '_' => finish
                }
            },
            org_management => #{
                url => <<"http://orgmgmt:8022/">>,
                retries => #{
                    'GetUserContext' => {linear, 2, 500},
                    '_' => finish
                }
            }
        }}
    ]},

    {token_keeper_client, [
        {service_clients, #{
            authenticator => #{
                url => <<"http://token-keeper:8022/v2/authenticator">>,
                timeout => 1000,
                retries => #{
                    'Authenticate' => {linear, 3, 100},
                    '_' => finish
                }
            },
            % No authorities utilized
            authorities => #{}
        }}
    ]},

    {prometheus, [
        {collectors, [default]}
    ]}
].
